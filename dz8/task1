import pygame as pg
import numpy as np


coord_die = (220,20,60)
coord_alive = (50, 205, 50)
coord_back = (0, 0, 0)
coord_grid = (26,26,26)


def update(surface, coor, sz):
    nxt = np.zeros((coor.shape[0], coor.shape[1]))

    for r, c in np.ndindex(coor.shape):
        quant_alive = np.sum(coor[r-1:r+2, c-1:c+2]) - coor[r, c]

        if coor[r, c] == 1 and quant_alive < 2 or quant_alive > 3:
            col = coord_die
        elif (coor[r, c] == 1 and 2 <= quant_alive <= 3) or (coor[r, c] == 0 and quant_alive == 3):
            nxt[r, c] = 1
            col = coord_alive

        col = col if coor[r, c] == 1 else coord_back
        pg.draw.rect(surface, col, (c*sz, r*sz, sz-1, sz-1))
    return nxt


def init(coor1, coor2):
    cells = np.zeros((coor2, coor1))

    pattern = np.array([[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                        [0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0],
                        [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0],
                        [1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                        [1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                        [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                        [0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
                        [0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]);
    pos = (3,3)
    cells[pos[0]:pos[0]+pattern.shape[0], pos[1]:pos[1]+pattern.shape[1]] = pattern
    return cells


def main(coor1, coor2, cell_size):
    pg.init()
    surface = pg.display.set_mode((coor1 * cell_size, coor2 * cell_size))
    pg.display.set_caption("Game of Life")

    cells = init(coor1, coor2)

    while True:
        for event in pg.event.get():
            if event.type == pg.QUIT:
                pg.quit()
                return

        surface.fill(coord_grid)
        cells = update(surface, cells, cell_size)
        pg.display.update()


if __name__ == "__main__":
    main(100, 70, 8)