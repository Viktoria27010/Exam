import json
import re

with open('D:/rna_codon_table.json') as json_file:
     #######################################################################
    # TODO:                                                               #
    # Use json.load function to load contents of json file to a dict      #
    #######################################################################
    # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
    data = json.load(json_file)
    data.pop('UAA')
    data.pop('UAG')
    data.pop('UGA')

    # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****

class SequenceError(Exception):
    def __init__(self, message: str) -> None:
        self.message = message
    
    def __str__(self) -> str:
        return f'{self.message}'

class Sequence(object):
    seq_type = None
    types = set(['DNA', 'RNA', 'Protein'])# all possible sequence types

    #######################################################################
    # TODO:                                                               #
    # Create sets: _prot_acids (a set of all amino acids using            #  
    # json codon_table), _dna_nucls (a set of all nucleotides in a DNA),  #
    # _rna_nucls (a set of all nucleotides in a RNA)                      #
    #######################################################################
    # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
    _prot_acids = set(data.values())
    _dna_nucls = set(['A', 'T', 'G', 'C'])
    _rna_nucls = set(['A', 'U', 'G', 'C'])

    # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****

    def __init__(self, file_name: str) -> None:
        """
        Input:
        - file_name : FASTA file with sequence_name, sequence_type and 
        the sequence itself

        Output: None
        """
        #######################################################################
        # TODO:                                                               #
        # Using _parse and _check methods check that input sequence is        #
        # correct. Add an extra check that resulting sequence type corresponds#
        # to the given sequence_type. if everything is fine then create       #
        # sequence_attribute to store given sequence and change self.seq_type # 
        # to sequence_type, else raise Error                                  #
        #######################################################################
        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
        self.file_name = file_name  
        self.seq_type, self.sequence = self._parse(file_name)
        
        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
   
    def _parse(self, file_name: str) -> tuple[str, str]:
        """
        Input:
        - file_name : FASTA file with sequence_name, sequence_type and 
        the sequence itself

        Output: A tuple with (sequence, sequence_type)
        """
        #######################################################################
        # TODO:                                                               #
        # Open file_name and read its contents.                               #
        # Input file format:                                                  #
        # >sequence_name sequence_type                                        #
        # sequence                                                            #
        #######################################################################
        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
        with open(file_name, 'r') as fp:
            lines = fp.readlines()
            sequence = ''
            seq_type = ''
            for i, ln in enumerate(lines):
                ln = ln.strip()
                if '>' in ln:
                    seq_type = ln.split()[1]
                    sequence = lines[i+1].strip()
                    break
        return (seq_type, sequence)

        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
    def _check(self, string: str) -> bool:
        """
        Input:
        - string : sequence from FASTA file

        Output: A boolean value (True or False)
        """
        #######################################################################
        # TODO:                                                               #
        # Check that given type is in self.types                              #
        # Check that every element of given string is either in               #
        # self._prot_acids/self._dna_nucls/self._rna_nucls. If its true,      #
        # return True, else return False                                      #
        #######################################################################
        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
        for nucl in string:
            if self.seq_type not in self.types:
             return False 
            elif self.seq_type == 'DNA' and nucl not in self._dna_nucls:
                return False
            elif self.seq_type == 'RNA' and nucl not in self._rna_nucls:
                return False
            elif self.seq_type == 'Protein' and nucl not in self._prot_acids:
                    return False
            else:
                return True
            
        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****

    def hamming_distance(self, s2: str) -> int:
        """
        Input:
        - sequence : another sequence of nucleotides

        Output: number of different letters 
        between sequence_attribute and given string sequence
        """
        #######################################################################
        # TODO:                                                               #
        # First, check that sequence_attribute and given string have the same #
        # length, if not raise Error.                                         #
        # If the length of strings is the same, loop over one of the strings  #
        # and count different letters.                                        #
        #######################################################################
        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
        if len(self.file_name) != len(s2):
            raise ValueError('Ooops')
        else: c = 0
        for i in range(0, len(self.sequence)):
                if self.sequence[i] != s2[i]:
                    c += 1
                    self.HDseq = c
        return self.HDseq

        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
    def count_nucleotides(self) -> None:
        """
        Input: None

        Output: None
        """
        #######################################################################
        # TODO:                                                               #
        # Raise an error, since transrcibe method can work only with elements #
        # of DNA, RNA or Protein classes                                      #
        #######################################################################
        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
        raise NameError
        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****

    def to_protein(self) -> None:
        """
        Input: None

        Output: None
        """
        #######################################################################
        # TODO:                                                               #
        # Raise an error, since transrcibe method can work only with elements #
        # of DNA, RNA or Protein classes                                      #
        #######################################################################
        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
        raise NameError
        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
    
    def transcribe(self) -> None:
        """
        Input: None

        Output: None
        """
        #######################################################################
        # TODO:                                                               #
        # Raise an error, since transrcibe method can work only with elements #
        # of DNA or RNA classes                                               #
        #######################################################################
        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
        raise NameError
        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****

class DNA(Sequence):
    _type = 'DNA'
    def count_nucleotides(self) -> dict:
        """
        Input: None

        Output:
        - a dictionary with keys 'A', 'T', 'G', 'C' and their 
        corresponding amounts in sequence_attribute. 
        {'A': count_A, 'T': count_T, 'G': count_G, 'C': count_C}
        """
        #######################################################################
        # TODO:                                                               #
        # Counting 'A's, 'T's, 'G's, 'C's either by                           #
        # looping over sequence_attribute or using a standard string method.  #
        #######################################################################
        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
        D_A = self.sequence.count('A')
        D_T = self.sequence.count('T')
        D_G = self.sequence.count('G')
        D_C = self.sequence.count('C')
        self.countedDNA = {'A': D_A, 'T': D_T, 'C': D_C, 'G': D_G}
        return self.countedDNA
        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****

            
    def complement_dna(self) -> str:
        """
        Input: None

        Output: a NEW string, where all 'A's were changed to 'T's
        and vice versa, all 'C's changed to 'G's and vice versa
        """
        #######################################################################
        # TODO:                                                               #
        # Create a new empty string. Loop over sequence_attribute with        #
        # if-statements, while adding corresponding letters                   #
        # to the empty string.                                                #
        #######################################################################
        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
        D_G = [*self.sequence]
        for i in range(len(D_G)):
            if D_G[i] == 'A':
             D_G[i] = 'T'
            elif D_G[i] == 'T':
             D_G[i] = 'A'
            elif D_G[i] == 'G':
             D_G[i] = 'C'
            elif D_G[i] == 'C':
             D_G[i] = 'G'
             self.D_K = ''.join(D_G)
             return self.D_K
        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
    def transcribe(self) -> str:
        """
        Input: None

        Output: a NEW string, where all 'T's were changed to 'U's
        """
        #######################################################################
        # TODO:                                                               #
        # Create a new empty string. Loop over sequence_attribute with        #
        # if-statements, while adding corresponding letters                   #
        # to the empty string.                                                #
        #######################################################################
        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
        self.string_transcribedDNA = self.sequence.replace('T', 'U')
        return self.string_transcribedDNA
        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
    
    def to_protein(self) -> str:
        """
        Input: None

        Output: a NEW string, where all nucleotides are replaced with codons
        """
        #######################################################################
        # TODO:                                                               #
        # First transcribe DNA sequence to RNA using transcribe() method.     #
        # Second find 'AUG' - start codon. If it is found use json codon table#
        # to transcribe every 3 nucleotides of sequence_attribute to a codon, #
        # if a stop-codon is met then stop the transcription, else transcribe #
        # untill the end of the sequence.                                     #
        # If start codon was not found - raise Error                          #
        #######################################################################
        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
        transcr_dna = self.sequence.replace('T', 'U')
        if 'AUG' not in transcr_dna:
            raise ValueError("No start codon")
        prot = []

        index = transcr_dna.index('AUG')
        for i in range(index+3, len(transcr_dna), 3):
            codon = transcr_dna[i:i+3]
            prot.append(data[codon])
    
            if codon in ["UAA", "UAG", "UGA"]:
                break
        index += 3
        return (prot)

        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****

    
    def restriction_slices(self) -> int:
        """
        Input: None

        Output: number of slices by EcoRI restrictase
        """
        #######################################################################
        # TODO:                                                               #
        # EcoRI restrictase slices 'GAATTC'/'CTTAAG' sequences, return        #
        # resulting number of slices                                          #
        #######################################################################
        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
        return len(self.sequence.split('GAATTC', 'CTTAAG'))
        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****

class RNA(Sequence):
    _type = 'RNA'
    def count_nucleotides(self) -> dict:
        """
        Input: None

        Output:
        - a dictionary with keys 'A', 'U', 'G', 'C' and their 
        corresponding amounts in sequence_attribute. 
        {'A': count_A, 'U': count_U, 'G': count_G, 'C': count_C}
        """
        #######################################################################
        # TODO:                                                               #
        # Counting 'A's, 'U's, 'G's, 'C's either by                           #
        # looping over sequence_attribute or using a standard string method.  #
        #######################################################################
        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
        D_AA = self.sequence.count('A')
        D_UU = self.sequence.count('U')
        D_GG = self.sequence.count('G')
        D_CC = self.sequence.count('C')
        self.countedRNA = {'A': D_AA, 'U': D_UU, 'C': D_CC, 'G': D_GG}
        return self.countedRNA
        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
    
    def transcribe(self) -> str:
        """
        Input: None

        Output: a NEW string, where all 'U's were changed to 'T's
        """
        #######################################################################
        # TODO:                                                               #
        # Create a new empty string. Loop over sequence_attribute with        #
        # if-statements, while adding corresponding letters                   #
        # to the empty string.                                                #
        #######################################################################
        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
        self.string_transcribedRNA = self.sequence.replace('U', 'T')
        return self.string_transcribedRNA
        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
    
    def to_protein(self) -> str:
        """
        Input: None

        Output: a NEW string, where all nucleotides are replaced with codons
        """
        #######################################################################
        # TODO:                                                               #
        # First find 'AUG' - start codon. If it is found use json codon table #
        # to transcribe every 3 nucleotides of sequence_attribute to a codon, #
        # if a stop-codon is met then stop the transcription, else transcribe #
        # untill the end of the sequence.                                     #
        # If start codon was not found - raise Error                          #
        #######################################################################
        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****

        transcr_rna = self.sequence.replace('T', 'U')
        if 'AUG' not in transcr_rna:
            raise ValueError("No start codon")
        protrna = []

        index = transcr_rna.index('AUG')
        for i in range(index+3, len(transcr_rna), 3):
            codon = transcr_rna[i:i+3]
            protrna.append(data[codon])
    
            if codon in ["UAA", "UAG", "UGA"]:
                break
        index += 3
        return (protrna)
    
        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****

class Protein(Sequence):
    _type = 'Protein'
    #######################################################################
    # TODO:                                                               #
    # Create two sets of positive charge amino acids and negative charge  #
    # amino acids: _pos_acids and _neg_acids                              #
    #######################################################################
    # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
    _pos_acids = set(['K', 'R', 'H'])
    _neg_acids  = set(['D', 'E'])
    # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****

    def count_amino_acids(self) -> dict:
        """
        Input: None

        Output:
        - a dictionary with amino acids as keys and their corresponding
        amounts in sequence_attribute
        {'A': count_A, 'U': count_U, 'G': count_G, 'C': count_C ...}
        """
        #######################################################################
        # TODO:                                                               #
        # Using dictionary with codons as values, create a new dictionary     #
        # with amino acids and count them in sequence_attribute by            #
        # looping over sequenceattribute or using a standard string method.   #
        #######################################################################
        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
        PP_A=self.sequence.count('A')
        PP_R=self.sequence.count('R')
        PP_N=self.sequence.count('N')
        PP_D=self.sequence.count('D')
        PP_C=self.sequence.count('C')
        PP_Q=self.sequence.count('Q')
        PP_E=self.sequence.count('E')
        PP_G=self.sequence.count('G')
        PP_H=self.sequence.count('H')
        PP_I=self.sequence.count('I')
        PP_L=self.sequence.count('L')
        PP_K=self.sequence.count('K')
        PP_M=self.sequence.count('M')
        PP_F=self.sequence.count('F')
        PP_P=self.sequence.count('P')
        PP_S=self.sequence.count('S')
        PP_T=self.sequence.count('T')
        PP_W=self.sequence.count('W')
        PP_Y=self.sequence.count('Y')
        PP_V=self.sequence.count('V')
        self.countaa = {'A': PP_A, 'R': PP_R, 'N': PP_N, 'D': PP_D, 'C': PP_C, 'Q': PP_Q, 'E': PP_E, 'G': PP_G, 'H': PP_H, 'I': PP_I,
                      'L': PP_L, 'K': PP_K, 'M': PP_M, 'F': PP_F, 'P': PP_P, 'S': PP_S, 'T': PP_T, 'W': PP_W, 'Y': PP_Y, 'V': PP_V}
        return self.countaa
        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
    def to_protein(self) -> str:
        """
        Input: None

        Output:
        - sequence of amino acids
        {'A': count_A, 'U': count_U, 'G': count_G, 'C': count_C ...}
        """
        #######################################################################
        # TODO:                                                               #
        # Returning sequence_attribute is enough                              #
        #######################################################################
        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
        return self.sequence
    
        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
    def charge(self) -> int:
        """
        Input: None

        Output:
        - resulting charge of sequence
        """
        #######################################################################
        # TODO:                                                               #
        # Loop over the amino acids and check if they are in _pos_acids or    #
        # _neg_acids. If in _pos_acids then charge increases by 1, if in      #
        # _neg_acids decreases by 1, else does not changes                    #
        #######################################################################
        # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
        charge = 0
        for i in self.sequence:
            if i in self._pos_acids:
                charge += 1
            if i in self._neg_acids:
                charge-= 1
        self.chargee = charge
        return self.chargee
            
        # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
